def x
  <Int>
is
  ({\ x -> x<Int>} 3<Int>)
end

def jabber
  <((Arr (Maybe Int)) Int)>
is
   {\ x -> case x<(Maybe Int)> of
             <(Nothing)> 0<Int>
             <(Just y) > y<Int>
           end
   }
end

def jub
  <Int>
is
  (jabber<((Arr (Maybe Int)) Int)> Nothing<(Maybe Int)>)
end

def jerb
  <((Arr (Maybe Int)) ((Arr (Maybe Int)) Int))>
is
  { \ m ->
   ({\ x -> case x<(Maybe Int)> of
              <(Nothing)> 0<Int>
              <(Just y) > y<Int>
           end
    } m<(Maybe Int)>)
  }
end

def jreb
  <((Arr Int) Int)>
is
  { \ m ->
   ({\ x -> case x<(Maybe Int)> of
              <(Nothing)> 0<Int>
              <(Just y) > y<Int>
           end
    } (Just<((Arr Int) (Maybe Int))>m<Int>))
  }
end
